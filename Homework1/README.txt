Debug랑 Release 성능 차이가 큽니다. 프로그램 실행시 Release로 컴파일해주십시오.
(행렬, 물리 계산이 비최적화 / 최적화 차이가 큼.)

물리 계산에는 reactphysics3d 라이브러리를 사용했습니다.
해당 라이브러리 소스를 받아 32비트로 컴파일하여 링크했습니다.(프로젝트 폴더에 들어있음.)
F1으로 디버그용 바운딩 박스를 켜고 끌수 있습니다.

처음에 콘솔에서 입력을 받습니다.
width, height 각각 5보다 작을 수 없고 30보다 클 수 없습니다.
잘못된 미로 크기를 입력하면 다시 입력을 받습니다.

키보드 입력은 키보드 콜백 함수가 정의되어 있는 오브젝트가 stdout으로 출력합니다.
예시)
GPlayer 객체가 KeyDown 입력을 받았을 경우
[GPlayer::OnKeyDown] key=a x=604 y=220

키보드 입력은 현재 Scene의 Root가 받은 이벤트를 자식들에게 전파함으로써
각 객체에 전달됩니다.

q/Q 입력시 프로그램을 종료하며,
c/C 입력시 전체 상태를 초기화합니다.

o/p로 투영 모드를 전환할 수 있습니다.
단, 직각 투영의 특징에 의해 1인칭 객체 모드에서 직각 투영 사용시
어색하게 보일 수 있습니다.

카메라 상태는 TAB으로 전환할 수 있습니다.(전체/객체 시점)
1, 3 으로 객체 시점의 1인칭/3인칭 을 전환할 수 있습니다.

우측상단 탑뷰는 어떤 모드든 항상 가장 위에 표시됩니다.

전체 뷰 모드일때 x/X, y/Y로 카메라가 원점에 대해 공전하도록 할 수 있습니다,
x 방향으로 공전하면 y축 공전이 초기화되고, y축 방향으로 공전하면 x축 공전이
초기화됩니다.

객체 시점일때는 y/Y로 객체가 y축을 기준으로 회전하고,
x/X일 때 1인칭 카메라만 local x 축을 기준으로 회전합니다.
(fps 방식 카메라, 이렇게 하면 객체 이동 방향은 zx 평면에 고정됨.)

wasd로 객체를 이동시킬 수 있습니다.
w 입력시 -local z 방향으로 이동하고, s 입력시 local z방향,
a 입력시 -local x, d 입력시 local x 방향으로 이동합니다.
(객체가 보는 방향에 맞춰 움직임.)

r을 입력하면 미로가 생성됩니다.
명세상의 s 명령어는 wasd의 s와 겹치기 때문에 e로 설정하였습니다.
그 뒤에 e를 입력하면 객체가 초기 위치로 이동하고
움직일 수 있게 됩니다.(e 입력 전에는 움직일 수 없습니다.)
e를 입력하면 객체가 미로 시작 위치로 이동하며
1인칭 모드로 자동 전환됩니다.

m 입력시 육면체들이 움직이고 M 입력시 움직임을 멈춥니다.

육면체의 최소 높이는 1.0, 3.0 사이의 랜덤한 값이고,
최대 높이는 6.0, 12.0 사이의 랜덤한 값입니다.
높이 변화 속도는 2.0, 4.0 사이의 랜덤한 값입니다.

+/- 로 육면체들이 위 아래로 움직이는 속도를 조절할 수 있습니다.
속도가 0보다 작아질 수 없습니다.
v 입력시 높이가 2.0으로 고정되며, 다시 v를 입력하면 
원래 높이로 돌아오고 움직이기 시작합니다.
v로 높이를 고정하면 m을 입력해도 움직이지 않습니다.